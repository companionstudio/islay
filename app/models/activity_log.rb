class ActivityLog < ActiveRecord::Base
  belongs_to :loggable, :polymorphic => true
  belongs_to :user
  belongs_to :person
 
  attr_accessible :source, :key, :description, :classification, :details, :user, :person, :loggable
 
  # Generates a regular activity log. Can optionally be associated with a 
  # model and/or have an extra payload in the form of a hash.
  #
  # The key is an arbitrary symbol used to group logs. For example, the 
  # ordering system might use :order for any logs related to an order.
  #
  # This method makes no guarantee that it will successfully save the 
  # activity log. This is intentional, since there is the possibility of the 
  # logging itself causing some other sensitive code to fail.
  #
  # @param [:system, :user, :public] source
  # @param Symbol key
  # @param String description
  # @param Hash opts
  # @option opts ActiveRecord::Base :for
  # @option opts Symbol :action
  # @option opts User :user
  # @option opts Person :person
  # @option opts Hash :details
  # @option opts [:info, :warning, :error] :classification
  # @return ActivityLog
  def self.add(source, key, description, opts = {})
    new.tap do |log|
      log.source         = source
      log.key            = key
      log.description    = description
      log.classification = opts[:classification] || :info
      log.action         = opts[:action] if opts.has_key?(:action)
      log.loggable       = opts[:for] if opts.has_key?(:for)
      log.user           = opts[:user] if opts.has_key?(:user)
      log.person         = opts[:person] if opts.has_key?(:person)
      log.details        = opts[:details] if opts.has_key?(:details)

      log.save
    end
  end

  def self.register(*)

  end

  # A shortcut for retrieving the most recent logs.
  #
  # @param Integer count
  # @param ActiveRecord::Relation
  def self.recent(count = 30)
    order("created_at DESC").limit(count)
  end
 
  # Returns a relation scoped to logs that are generated by the specified 
  # source.
  #
  # @param [:system, :user, :public] source
  # @return ActiveRecord::Relation
  def self.source(source)
    where(:source => source)
  end
 
  # Returns a relation scoped to logs with the specified classification.
  #
  # @param [:info, :warning, :error] c
  # @return ActiveRecord::Relation
  def self.classification(c)
    where(:source => c)
  end
 
  # Returns a relation scoped to the logs with the specified key.
  #
  # @param Symbol k
  # @return ActiveRecord::Relation
  def self.key(k)
    where(:source => k)
  end
end
